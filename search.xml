<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/07/05/er-fen-cha-zhao/"/>
      <url>/2022/07/05/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<p><strong>二分查找</strong>又称为 <strong>折半查找</strong>，仅适用于<strong>有序</strong>的<strong>顺序表</strong>。</p><p><strong>基本思想</strong>：先将给定值 <strong>key</strong> 与表中中间位置的元素进行比较，若相等，则查找成功；若不相等，则所需查找的元素只能在中间元素以外的前半部分或后半部分查找。例如若表按关键字非递减排列，当中间元素比待查找值 <strong>key</strong> 小时，则在后半部分查找，否则在前半部分查找。直至查找成功或到达退出条件。</p><p><strong>时间复杂度</strong>：O(log2 n)</p><p><strong>难点：</strong>二分查找思想比较简单，只不过在写代码中关于边界的确定有一些小细节。例如，二分查找一般分为<strong>左闭右闭</strong>，<strong>左开右开</strong>两个类型。而在比较中 <strong>right</strong> 和 <strong>left</strong> 的重新界定也有所不同。有时 right = mid + 1，有时 right = mid。</p><p><strong>题目练习</strong>：</p><p><strong>1.<a href="https://leetcode.cn/problems/binary-search/">二分查找</a></strong></p><p>左闭右开：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution &#123;public:    int search(vector&lt;int&gt;&amp; nums, int target) &#123;        int left &#x3D; 0;        int right &#x3D; nums.size();        while (left &lt; right) &#123;            int mid &#x3D; left + (right - left) &#x2F; 2;            if (nums[mid] &gt; target) &#123;                right &#x3D; mid;            &#125; else if (nums[mid] &lt; target) &#123;                left &#x3D; mid + 1;            &#125; else &#123;                return mid;            &#125;        &#125;        return -1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左闭右闭：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution &#123;public:    int search(vector&lt;int&gt;&amp; nums, int target) &#123;        int left &#x3D; 0;        int right &#x3D; nums.size() - 1;        while (left &lt;&#x3D; right) &#123;            int mid &#x3D; left + (right - left) &#x2F; 2;            if (nums[mid] &gt; target) &#123;                right &#x3D; mid - 1;            &#125; else if (nums[mid] &lt; target) &#123;                left &#x3D; mid + 1;            &#125; else &#123;                return mid;            &#125;        &#125;        return -1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2022/07/05/shuang-zhi-zhen/"/>
      <url>/2022/07/05/shuang-zhi-zhen/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS</title>
      <link href="/2022/07/05/bfs/"/>
      <url>/2022/07/05/bfs/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS</title>
      <link href="/2022/07/05/dfs/"/>
      <url>/2022/07/05/dfs/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分数组</title>
      <link href="/2022/07/05/chai-fen-shu-zu/"/>
      <url>/2022/07/05/chai-fen-shu-zu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/2022/07/05/qian-zhui-he/"/>
      <url>/2022/07/05/qian-zhui-he/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/07/05/io-liu/"/>
      <url>/2022/07/05/io-liu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2022/07/05/she-ji-mo-shi/"/>
      <url>/2022/07/05/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/07/05/mysql/"/>
      <url>/2022/07/05/mysql/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/07/05/linux/"/>
      <url>/2022/07/05/linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/07/05/jvm/"/>
      <url>/2022/07/05/jvm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2022/07/05/springcloud/"/>
      <url>/2022/07/05/springcloud/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/07/05/springboot/"/>
      <url>/2022/07/05/springboot/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2022/07/05/rabbitmq/"/>
      <url>/2022/07/05/rabbitmq/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/07/05/nginx/"/>
      <url>/2022/07/05/nginx/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/07/05/docker/"/>
      <url>/2022/07/05/docker/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/07/05/redis/"/>
      <url>/2022/07/05/redis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/07/05/git/"/>
      <url>/2022/07/05/git/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2022/07/04/wei-yun-suan/"/>
      <url>/2022/07/04/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="1、与-amp-运算"><a href="#1、与-amp-运算" class="headerlink" title="1、与(&amp;)运算"></a>1、与(&amp;)运算</h2><h3 id="1-运算法则"><a href="#1-运算法则" class="headerlink" title="(1)运算法则"></a>(1)运算法则</h3><p>两个二进制数进行与&amp;运算，如果对应位都为1则结果为1，否则为0.</p><h3 id="2-技巧及用途"><a href="#2-技巧及用途" class="headerlink" title="(2)技巧及用途"></a>(2)技巧及用途</h3><p><strong>与运算常常用于二进制下的取位操作。</strong>想要知道二进制下的某位是否是1，就&amp;上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.</p><p>比如：</p><p>我们要取第三位是否为1，我们只需要与&amp;上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.</p><p>最常用的是取二进制下的最末位，即a&amp;1。这样的技巧可以用于<strong>判断奇偶</strong>，根据二进制常识，尾数为1则为奇数，反之为偶数。</p><hr><h2 id="2、或-运算"><a href="#2、或-运算" class="headerlink" title="2、或(|)运算"></a>2、或(|)运算</h2><h3 id="1-运算法则-1"><a href="#1-运算法则-1" class="headerlink" title="(1)运算法则"></a>(1)运算法则</h3><p>两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.</p><h3 id="2-技巧及用途-1"><a href="#2-技巧及用途-1" class="headerlink" title="(2)技巧及用途"></a>(2)技巧及用途</h3><p><strong>或运算常用于二进制特定位的赋值</strong>。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。</p><p>还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。</p><p>当然，不同于&amp;运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是<strong>把原数加一</strong>。或者使用a|1-1再把它变为0.这个技巧通常用于<strong>把它变成它最接近的偶数</strong>。</p><hr><h2 id="3、异或-xor-运算"><a href="#3、异或-xor-运算" class="headerlink" title="3、异或(^)(xor)运算"></a>3、异或(^)(xor)运算</h2><h3 id="1-运算法则-2"><a href="#1-运算法则-2" class="headerlink" title="(1)运算法则"></a>(1)运算法则</h3><p>两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.</p><h3 id="2-技巧及用途-2"><a href="#2-技巧及用途-2" class="headerlink" title="(2)技巧及用途"></a>(2)技巧及用途</h3><p>其实没啥用途…</p><p>好吧，我介绍一个性质：一个数经过两次异或之后等于原数。</p><p>（很好理解）</p><hr><h2 id="4、非-运算"><a href="#4、非-运算" class="headerlink" title="4、非(~)运算"></a>4、非(~)运算</h2><h3 id="1-运算法则-3"><a href="#1-运算法则-3" class="headerlink" title="(1)运算法则"></a>(1)运算法则</h3><p>把给定二进制数全部取反。</p><h3 id="2-技巧及用途-3"><a href="#2-技巧及用途-3" class="headerlink" title="(2)技巧及用途"></a>(2)技巧及用途</h3><p>其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0…</p><p>大约长这个样子：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while(~scanf(&quot;%d&quot;,&amp;n))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="5、左移-lt-lt-运算"><a href="#5、左移-lt-lt-运算" class="headerlink" title="5、左移(&lt;&lt;)运算"></a>5、左移(&lt;&lt;)运算</h2><h3 id="1-运算法则-4"><a href="#1-运算法则-4" class="headerlink" title="(1)运算法则"></a>(1)运算法则</h3><p>a&lt;&lt;b表示把a的二进制位向左移动b位，低位用0补上。</p><h3 id="2-技巧及用途-4"><a href="#2-技巧及用途-4" class="headerlink" title="(2)技巧及用途"></a>(2)技巧及用途</h3><p>根据二进制的常识，我们会发现，二进制第k位上的数就等于2k2k。（从0开始计位）</p><p>比如，二进制下的100就是2k=2=42k=2=4。</p><p>所以我们发现，左移运算a&lt;&lt;b的实质就是a×2ba×2b。</p><p>左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。</p><hr><h2 id="6、右移-gt-gt-运算"><a href="#6、右移-gt-gt-运算" class="headerlink" title="6、右移(&gt;&gt;)运算"></a>6、右移(&gt;&gt;)运算</h2><h3 id="1-运算法则-5"><a href="#1-运算法则-5" class="headerlink" title="(1)运算法则"></a>(1)运算法则</h3><p>a&gt;&gt;b就是把a的二进制位向右移动b位，溢出的舍去。</p><h3 id="2-技巧及用途-5"><a href="#2-技巧及用途-5" class="headerlink" title="(2)技巧及用途"></a>(2)技巧及用途</h3><p>类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。</p><p>这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高百分之60的效率。</p><hr><h2 id="7、位运算优先级"><a href="#7、位运算优先级" class="headerlink" title="7、位运算优先级"></a>7、位运算优先级</h2><p>位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。</p><p>位运算的优先级如下：</p><p><strong>按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）</strong></p><hr><h2 id="附：位运算在状压DP的用法"><a href="#附：位运算在状压DP的用法" class="headerlink" title="附：位运算在状压DP的用法"></a>附：位运算在状压DP的用法</h2><p>众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。</p><p>正文：（本文中的a表示十进制下的整数）</p><p><strong>1、获得第i位的数字</strong>：(a&gt;&gt;i)&amp;1 或者 a&amp;(1&lt;&lt;i)</p><p>很好理解，我们知道可以用&amp;1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&amp;上1左移i位，也能达到我们的目的。</p><p><strong>2、设置第i位为1</strong>：a=a|(1&lt;&lt;i)</p><p>我们知道强制赋值用|运算，所以就直接强制|上第i位即可。</p><p><strong>3、设置第i位为0</strong>：a=a&amp;(~(1&lt;&lt;i))</p><p>这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1&lt;&lt;i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&amp;运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。</p><p><strong>4、把第i位取反</strong>：a=a^(1&lt;&lt;i)</p><p>1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。</p><p><strong>5、取出一个数的最后一个1</strong>：a&amp;(-a)</p><p>学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2022/07/04/duo-xian-cheng/"/>
      <url>/2022/07/04/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1.    概念介绍"></a>1.    概念介绍</h2><h3 id="1-1-什么是进程"><a href="#1-1-什么是进程" class="headerlink" title="1.1    什么是进程?"></a>1.1    什么是进程?</h3><blockquote><p>开发写的代码称为程序，那么我们将程序运行起来，我们称之为进程；当我们运行一个程序，那么我们将运行的程序叫进程；进程就是申请一块内存空间，将数据放到内存空间中去，是申请数据的过程中最小的资源管理单元；进程是线程的容器；</p></blockquote><h3 id="1-2-程序与进程的区别；"><a href="#1-2-程序与进程的区别；" class="headerlink" title="1.2    程序与进程的区别；"></a>1.2    程序与进程的区别；</h3><blockquote><p>程序是数据和指令的集合，是一个静态的概念，就是一堆代码，可以长时间的保存在系统中；</p></blockquote><p>进程是程序运行的过程，是一个动态的概念，进程存在着生命周期，也就是说进程会随着程序的终止而销毁，不会永久存在系统中；</p><h3 id="1-3-进程间的交互"><a href="#1-3-进程间的交互" class="headerlink" title="1.3    进程间的交互"></a>1.3    进程间的交互</h3><blockquote><p>进程之间通过 TCP/IP 端口实现的</p></blockquote><h3 id="1-4-什么是线程？"><a href="#1-4-什么是线程？" class="headerlink" title="1.4    什么是线程？"></a>1.4    什么是线程？</h3><blockquote><ol><li>线程是操作系统能够进行运算调度的最小单位；</li><li>它被包含在进程之中，是进程中的实际运作单位；</li><li>一个线程指进程中一个单一顺序的控制流，一个进程可以并发多个线程，每条线程并行执行不同的任务；</li><li>是进程的一条流水线，只用来执行程序，而不涉及到申请资源，是程序的实际执行者，是最小的执行单位；</li></ol></blockquote><h3 id="1-5-线程之间的交互"><a href="#1-5-线程之间的交互" class="headerlink" title="1.5    线程之间的交互"></a>1.5    线程之间的交互</h3><blockquote><p>多个线程共享同一内存，通过共享的内存空间来交互</p></blockquote><h3 id="1-6-举例说明，进程和线程的关系"><a href="#1-6-举例说明，进程和线程的关系" class="headerlink" title="1.6    举例说明，进程和线程的关系"></a>1.6    举例说明，进程和线程的关系</h3><blockquote><p>比如说我们用手机打开微信，运行的微信就是开启的一个线程，当我们使用微信的一些功能，扫一扫，付款等，这些都是线程；<br>进程包含线程，线程属于进程的子集；</p></blockquote><h3 id="1-7-进程池"><a href="#1-7-进程池" class="headerlink" title="1.7    进程池"></a>1.7    进程池</h3><blockquote><p>进程池是资源进程，管理进程组成的应用及技术；</p></blockquote><h3 id="1-8-为什么要有进程池"><a href="#1-8-为什么要有进程池" class="headerlink" title="1.8    为什么要有进程池?"></a>1.8    为什么要有进程池?</h3><blockquote><p>😮忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。<br>😒那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？<br>😓首先，创建进程需要消耗时间，销毁进程也需要消耗时间。<br>😟第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。<br>😥因此我们不能无限制的根据任务去开启或者结束进程。那么我们要怎么做呢？</p></blockquote><h3 id="1-9-进程池的概念"><a href="#1-9-进程池的概念" class="headerlink" title="1.9    进程池的概念"></a>1.9    进程池的概念</h3><blockquote><ol><li>定义一个池子，里面放固定数量的进程，有需求来了，就从池子里拿一个进程来处理任务；</li><li>任务处理完毕，进程并不关闭，而是将进程放回池子中等待任务；</li><li>如果有很多任务要执行，池子中进程数量不够，任务就要等待进程执行完之后，拿到空闲的进程才能执行；</li><li>池子中进程数量是固定的，也就是说同一时间最多能执行固定经常的任务</li><li>这样不会增加操作系统的调度难度，还节省了开关进程的时间，也能在一定程度上实现并发效果；</li></ol></blockquote><h3 id="1-11-资源进程"><a href="#1-11-资源进程" class="headerlink" title="1.11    资源进程"></a>1.11    资源进程</h3><blockquote><p>预先创建好空的进程，管理进程会把任务分发到空闲进程来处理</p></blockquote><h3 id="1-12-管理进程"><a href="#1-12-管理进程" class="headerlink" title="1.12    管理进程"></a>1.12    管理进程</h3><blockquote><p>管理进程负责创建资源进程，把工作交给空闲资源处理，回收已经处理完的资源进程；</p></blockquote><h3 id="1-13-资源进程与管理进程的交互"><a href="#1-13-资源进程与管理进程的交互" class="headerlink" title="1.13    资源进程与管理进程的交互"></a>1.13    资源进程与管理进程的交互</h3><blockquote><p>管理进程如何有效的管理资源进程，分配任务给资源进程?</p></blockquote><p>通过 IPC，信号，信号量，消息队列，管道等进行交互。</p><h3 id="1-14-并发、并行和串行"><a href="#1-14-并发、并行和串行" class="headerlink" title="1.14    并发、并行和串行"></a>1.14    并发、并行和串行</h3><blockquote><p>并发：多个任务看起来同时执行，这是一种假并行；</p></blockquote><p>单核下使用多道技术实现；<br>![[线程并发.png]]</p><blockquote><p>并行：多个任务同时进行</p></blockquote><p>并行必须有多核才能实现，否则只能实现并发<br>![[线程并行.png]]</p><blockquote><p>串行：一个程序处理完当前进程，接着处理下一个进程，一个一个连着进行</p></blockquote><p>![[线程串行.png]]</p><h3 id="1-15-进程的三态"><a href="#1-15-进程的三态" class="headerlink" title="1.15    进程的三态"></a>1.15    进程的三态</h3><blockquote><p>进程在运行的过程中不断的改变其运行状态；</p></blockquote><p>通常一个运行的进程必须要有三个状态，就绪态，运行态，阻塞态</p><h4 id="1-15-1-就绪态"><a href="#1-15-1-就绪态" class="headerlink" title="1.15.1     就绪态"></a>1.15.1     就绪态</h4><blockquote><p>当进程获取除 CPU 外所有的资源后，只要在获得 CUP 就可执行程序，这时的状态叫做就绪态；</p></blockquote><p>在一个系统中处于就绪态的进程会有多个，通常把这些排成一个队列，这个就叫就绪队列；</p><h4 id="1-15-2-运行态"><a href="#1-15-2-运行态" class="headerlink" title="1.15.2     运行态"></a>1.15.2     运行态</h4><blockquote><p>当进程已经获得 CPU 操作权限，正在运行，这个时间就是运行态</p></blockquote><p>在单核系统中，同一个时间只能有一个运行态，多核系统中，会有多个运行态；</p><h4 id="1-15-3-阻塞态"><a href="#1-15-3-阻塞态" class="headerlink" title="1.15.3     阻塞态"></a>1.15.3     阻塞态</h4><blockquote><p>正在执行的进程，等待某个事件而无法继续运行时，便**作系统剥夺了 cpu 操作权限，这时时阻塞态；</p><p>引起阻塞的原因有很多，等待 I/O 操作，被更高优先级的进程剥夺了 cpu 权限等；</p></blockquote><h3 id="1-16-线程的方法"><a href="#1-16-线程的方法" class="headerlink" title="1.16    线程的方法"></a>1.16    线程的方法</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setPriority (int newPriority)</td><td align="center">更改线程的优先级</td></tr><tr><td align="center">sleep (long millis)</td><td align="center">制定毫秒数，让当前运行的线程休眠</td></tr><tr><td align="center">join ()</td><td align="center">等待该线程的终止</td></tr><tr><td align="center">yield ()</td><td align="center">暂停当前正在执行的线程对象，并执行其他的线程</td></tr><tr><td align="center">interrupt ()</td><td align="center">中断线程</td></tr><tr><td align="center">isAlive</td><td align="center">线程是否在活跃状态</td></tr></tbody></table><h2 id="二、Java-使用多线程"><a href="#二、Java-使用多线程" class="headerlink" title="二、Java 使用多线程"></a>二、Java 使用多线程</h2><h3 id="2-1-创建线程的三种方式"><a href="#2-1-创建线程的三种方式" class="headerlink" title="2.1    创建线程的三种方式"></a>2.1    创建线程的三种方式</h3><h4 id="2-1-1-继承-Thread-类"><a href="#2-1-1-继承-Thread-类" class="headerlink" title="2.1.1    继承 Thread 类"></a>2.1.1    继承 Thread 类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyThread * @Description: 实现一个简单的多线程 继承Thread   * @Author: DELL * @Date: 2021/12/24 14:24  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继承Thread实现了第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次调用;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">/**   * 继承thread 实现多线程   * 1. 类继承Thread   * 2. 重写run()   * 3. start() 调用   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ii <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main调用了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次；"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-实现-Runable-接口"><a href="#2-1-2-实现-Runable-接口" class="headerlink" title="2.1.2    实现 Runable 接口"></a>2.1.2    实现 Runable 接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyRunnable * @Description: 实现Runnable接口   * @Author: DELL   * @Date: 2021/12/24 14:33  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现Runnable实现了第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"调用;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**   * 实现Runnable接口实现多线程   * 1. 类实现Runnable   * 2. 重写run()   * 3. start() 调用   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">implementsRunnableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">MyRunnable</span> myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main调用了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-3-实现-Callable-接口"><a href="#2-1-3-实现-Callable-接口" class="headerlink" title="2.1.3    实现 Callable 接口"></a>2.1.3    实现 Callable 接口</h4><blockquote><ol><li>实现 Callable 接口, 需要返回值</li><li>重写 call 方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行服务，： <code>ExecutorService service = Executors.newCachedThreadPool();</code></li><li>提交执行：提交执行：Future&lt;&gt; submit = service. Submit (对象);</li><li>获取结果 ：Boolean aBoolean = submit. Get ();</li><li>关闭服务：service. ShutdownNow ();</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyCallable * @Description:实现Callable接口，   * @Author: sunyahui   * @Date: 2021/12/25 9:40  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">implementCallableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">MyCallable</span> myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> submit <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      service<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-线程的状态"><a href="#2-2-线程的状态" class="headerlink" title="2.2    线程的状态"></a>2.2    线程的状态</h3><h4 id="New"><a href="#New" class="headerlink" title="New"></a>New</h4><blockquote><p>线程已创建，尚未启动</p></blockquote><h4 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h4><blockquote><p>在 Java 虚拟机中正在执行的线程</p></blockquote><h4 id="Blocked"><a href="#Blocked" class="headerlink" title="Blocked"></a>Blocked</h4><blockquote><p>被等待监视器锁定的线程</p></blockquote><h4 id="Waiting"><a href="#Waiting" class="headerlink" title="Waiting"></a>Waiting</h4><blockquote><p>正在等待另一个线程执行特定动作的线程处于此状态</p></blockquote><h4 id="Timed-waiting"><a href="#Timed-waiting" class="headerlink" title="Timed_waiting"></a>Timed_waiting</h4><blockquote><p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</p></blockquote><h4 id="Terminated"><a href="#Terminated" class="headerlink" title="Terminated"></a>Terminated</h4><blockquote><p>已退出的线程</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyThreadState   * @Description: 观察线程的状态   * 通过state方法可以观察线程的状态   * @Author: sunyahui   * @Date: 2021/12/30 20:59   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadState</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                       <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阻塞时的状态"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"线程正在执行的状态："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">MyThreadState</span> myThreadState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThreadState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程创建未启动时状态:"</span><span class="token operator">+</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程启动后的状态:"</span><span class="token operator">+</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span>TERMINATED<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程运行时状态:"</span><span class="token operator">+</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束状态："</span><span class="token operator">+</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程优先级"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-线程停止"><a href="#2-3-线程停止" class="headerlink" title="2.3    线程停止"></a>2.3    线程停止</h3><blockquote><ol><li>建议线程正常停止; -&gt; 一般是利用次数</li><li>建议使用标志位；</li><li>不建议使用 stop 和 destroy 方法，已过时</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadStop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**标识位判断线程是否停止*/</span>       <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**设置一个公开的方法停止线程*/</span>       <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">stopThread</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span>flag<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">MyThreadStop</span> myThreadStop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThreadStop<span class="token punctuation">)</span><span class="token punctuation">;</span>          thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               myThreadStop<span class="token punctuation">.</span><span class="token function">stopThread</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-线程的优先执行"><a href="#2-4-线程的优先执行" class="headerlink" title="2.4    线程的优先执行"></a>2.4    线程的优先执行</h3><blockquote><p>Join 主要作用是优先执行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyThreaJoin   * @Description: join 主要作用是优先执行   * @Author: sunyahui   * @Date: 2021/12/30 20:43   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreaJoin</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"vip线程开始跑！"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//启动线程  </span>     <span class="token class-name">MyThreaJoin</span> threaJoin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreaJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threaJoin<span class="token punctuation">)</span><span class="token punctuation">;</span>       thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"正在跑！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-线程的优先级"><a href="#2-5-线程的优先级" class="headerlink" title="2.5    线程的优先级"></a>2.5    线程的优先级</h3><blockquote><p>SetPriority (int i ) 设置线程优先级<br>GetPriority () 获取线程的优先级</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestPriority</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">TestPriority</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的优先级"</span><span class="token operator">+</span><span class="token class-name">TestPriority</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPriority</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">TestPriority</span> priority1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">TestPriority</span> priority2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">TestPriority</span> priority3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">TestPriority</span> priority4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">TestPriority</span> priority5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程优先级"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          priority1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          priority1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//        System.out.println("priority1"+priority1.getPriority());  </span>        priority2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          priority2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//        System.out.println("priority2"+priority2.getPriority());  </span>        priority3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          priority3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//        System.out.println("priority3"+priority3.getPriority());  </span>        priority4<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          priority4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//        System.out.println("priority4"+priority4.getPriority());  </span>        priority5<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          priority5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//        System.out.println("priority5"+priority5.getPriority());  </span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-守护线程"><a href="#2-6-守护线程" class="headerlink" title="2.6    守护线程"></a>2.6    守护线程</h3><blockquote><p>线程分为用户线程和守护线程<br>虚拟机必须确保用户线程执行完<br>虚拟机不必等待守护线程执行完毕<br>如：后台记录日志，监控内存，垃圾回收线程等</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 上帝，守护线程   */</span>  <span class="token keyword">class</span> <span class="token class-name">God</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上帝保佑你！"</span><span class="token operator">+</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**   * you 用户线程   */</span>  <span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">35000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每天都在健康的活着"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you goodBye world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/*** 启动用户线程和守护线程*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDaemon</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">You</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">God</span> god <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span> youThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span> godThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>god<span class="token punctuation">)</span><span class="token punctuation">;</span>          godThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          youThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          godThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-Synchronized-方法"><a href="#2-7-Synchronized-方法" class="headerlink" title="2.7    Synchronized 方法"></a>2.7    Synchronized 方法</h3><blockquote><p>Sybchronized 方法控制对对象的访问，每个对象对应一把锁，每个 synchronized 方法都必须获取调用方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，知道方法返回才释放锁，后面被阻塞的线程才能获得锁，继续执行；<br>若将一个大的方法申明为 synchronized 将会影响概率<br>同步代码块：synchronized（obj）{}</p><p>Obj 称之为同步监视器</p><blockquote><p>obj 可以是任何对象，但是推荐使用共享资源作为同步监视器<br>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是 this，这个对象本身；</p></blockquote><p>同步监视器的执行过程</p><blockquote><ol><li>第一个线程访问，锁定同步监视器，执行其中的代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，解锁同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问；</li></ol></blockquote></blockquote><h4 id="2-8-多人购票的问题"><a href="#2-8-多人购票的问题" class="headerlink" title="2.8    多人购票的问题"></a>2.8    多人购票的问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">BuyTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>       <span class="token comment">//票数  </span>     <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>          <span class="token comment">//外部停止方式  </span>         <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>          <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//判断是否有票  </span>             <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNums<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"买到了第"</span><span class="token operator">+</span>ticketNums<span class="token operator">--</span><span class="token operator">+</span><span class="token string">"张票;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/**   * @ClassName: MyThreadSyn   * @Description: 线程同步的问题-多人购票   * @Author: DELL   * @Date: 2021/12/31 15:28   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadSyn1</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">BuyTicket</span> buyTicket1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">Thread</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>buyTicket1<span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">Thread</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>buyTicket1<span class="token punctuation">,</span> <span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">Thread</span> other <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>buyTicket1<span class="token punctuation">,</span> <span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              you<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              me<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              other<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-银行取钱问题"><a href="#2-9-银行取钱问题" class="headerlink" title="2.9    银行取钱问题"></a>2.9    银行取钱问题</h4><ol><li>创建账户信息</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**余额*/</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>          <span class="token comment">/**卡名*/</span>       <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>模拟银行取钱</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 模拟银行取钱   */</span>  <span class="token keyword">class</span> <span class="token class-name">Drawing</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>       <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span>       <span class="token comment">/**现有的钱*/</span>       <span class="token keyword">private</span>  <span class="token keyword">int</span> nowMoney<span class="token punctuation">;</span>       <span class="token comment">/**取出的钱*/</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> drawingMoney<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span> <span class="token class-name">Account</span> account<span class="token punctuation">,</span>  <span class="token keyword">int</span> drawingMoney<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney <span class="token operator">=</span> drawingMoney<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//判断有没有钱  </span>         <span class="token keyword">if</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>drawingMoney<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的账户没有那么多钱！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//余额  </span>         account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span> account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> drawingMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//手中的钱  </span>         nowMoney<span class="token operator">=</span>nowMoney<span class="token operator">+</span>drawingMoney<span class="token punctuation">;</span>           out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额为："</span><span class="token operator">+</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"手中的钱："</span><span class="token operator">+</span>nowMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试取钱流程</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyThreadSyn2   * @Description: 线程同步的问题-多人从银行取钱   * @Author: DELL   * @Date: 2021/12/31 16:22   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadSyn2</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"工商"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Drawing</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Drawing</span> girlFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token string">"girlFriend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       me<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       girlFriend<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-10-ArrayList-线程不安全"><a href="#2-10-ArrayList-线程不安全" class="headerlink" title="2.10    ArrayList 线程不安全"></a>2.10    ArrayList 线程不安全</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: MyThreadSyn   * @Description: 线程同步的问题-ArrayList线程不安全   * @Author: DELL   * @Date: 2021/12/31 17:03   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadSyn3</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">synchronized</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token punctuation">&#125;</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意： 如果将线程等待去掉，还是会有线程不安全，暂不明白其原理，待后续搞明白</p></blockquote><h3 id="2-11-死锁"><a href="#2-11-死锁" class="headerlink" title="2.11    死锁"></a>2.11    死锁</h3><blockquote><p>多个线程各自占有一些共享资源，并且相互等待其他线程占用的资源才能运行，而导致两个或两个以上的线程都在等待对方释放资源，都停止执行的情形；某一个同步块同时拥有两个对象以上的锁，就有可能发生死锁</p><p>产生死锁的必要条件</p><blockquote><ol><li>互斥条件：一个线程只能被一个人使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件: 进程以获得的资源，在未使用完之前，不能剥夺；</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源的关系</li></ol></blockquote></blockquote><p><strong>2.12    实现一个死锁</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 口红   */</span>  <span class="token keyword">class</span> <span class="token class-name">Lipstick</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 镜子   */</span>  <span class="token keyword">class</span> <span class="token class-name">Mirroe</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/**   * 写一个抢夺资源的方法   */</span>  <span class="token keyword">class</span> <span class="token class-name">Makeup</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>      <span class="token keyword">static</span> <span class="token class-name">Lipstick</span> lipstick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lipstick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token class-name">Mirroe</span> mirroe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirroe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> choice<span class="token punctuation">;</span>      <span class="token class-name">String</span> girlName<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span> <span class="token class-name">String</span> girlName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>choice <span class="token operator">=</span> choice<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>girlName <span class="token operator">=</span> girlName<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获取口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirroe<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获取镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirroe<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获取镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girlName<span class="token operator">+</span><span class="token string">"获取口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-13-Lock"><a href="#2-13-Lock" class="headerlink" title="2.13    Lock"></a>2.13    Lock</h4><blockquote><p>Java 提供了更强大的线程同步机制—通过显式定义同步锁对象来实现同步；同步锁使用 Lock 对象充当；<br>Lock 接口时控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对 Lock 对象加锁，线程开始访问共享资源之前应先获得 Lokc 对象；<br>ReentrantLock 类实现了 Lock, 他拥有 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的时 ReentrantLock，可以显示枷锁释放锁；</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 多人买票，用lock的方式实现   */</span>  <span class="token keyword">class</span> <span class="token class-name">TestLock2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> ticketNums<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNums<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                           <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"买到了票"</span><span class="token operator">+</span>ticketNums<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">TestLock2</span> testLock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestLock2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">,</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">,</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-14-线程通信"><a href="#2-14-线程通信" class="headerlink" title="2.14    线程通信"></a>2.14    线程通信</h3><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">wait ()</td><td align="center">表示线程一直等待，直到其他线程通知，与 sleep 不同会释放锁</td></tr><tr><td align="center">wait (long timeOut)</td><td align="center">指定等待的毫秒数</td></tr><tr><td align="center">notify ()</td><td align="center">唤醒一个处于等待状态的线程</td></tr><tr><td align="center">notifyAll()</td><td align="center">唤醒同一个对象所有的调用 wait()方法的线程，优先级高的优先调度</td></tr></tbody></table><h4 id="2-15-线程通讯，生产消费模式-管程法"><a href="#2-15-线程通讯，生产消费模式-管程法" class="headerlink" title="2.15    线程通讯，生产消费模式-管程法"></a>2.15    线程通讯，生产消费模式-管程法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 产品-鸡   */</span>  <span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">class</span> <span class="token class-name">Chicken</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/**   * 生产者   */</span>  <span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>       <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token operator">=</span>container<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               container<span class="token punctuation">.</span><span class="token function">pushTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 消费者   */</span>  <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>       <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token operator">=</span>container<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了第"</span><span class="token operator">+</span>container<span class="token punctuation">.</span><span class="token function">popTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span><span class="token punctuation">&#123;</span>       <span class="token comment">/**定义一个容器的大小*/</span>       <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chickens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">/** 容器计数器*/</span>       <span class="token keyword">int</span> count<span class="token punctuation">;</span>       <span class="token comment">/**       * 生产者想容器中放入产品       * @param chicken       */</span>       <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">pushTo</span><span class="token punctuation">(</span><span class="token class-name">Chicken</span> chicken<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//如果容器满了，就需要等待消费者消费  </span>         <span class="token keyword">if</span><span class="token punctuation">(</span>chickens<span class="token punctuation">.</span>length<span class="token operator">==</span>count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">//通知消费者消费  </span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>              <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>           <span class="token comment">//如果没有满就丢入产品  </span>          chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">=</span>chicken<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//通知消费者消费  </span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**       * 消费者从中取出产品       * @return       */</span>       <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Chicken</span> <span class="token function">popTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//判断能否消费  </span>         <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">// 消费者等待生产者产出  </span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>          <span class="token comment">//如果可以消费  </span>         count<span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token class-name">Chicken</span> chicken <span class="token operator">=</span> chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//吃完了通知生产者消费  </span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> chicken<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程通讯，生产消费模式-信号灯法"><a href="#线程通讯，生产消费模式-信号灯法" class="headerlink" title="线程通讯，生产消费模式-信号灯法"></a>线程通讯，生产消费模式-信号灯法</h4><h2 id="三、代理模式"><a href="#三、代理模式" class="headerlink" title="三、代理模式"></a>三、代理模式</h2><blockquote><p>不属于23种设计模式之一，只是在代码种使用的模式</p><ol><li><p>创建一个公共接口；</p></li><li><p>一个真实的类，实现公告接口</p></li><li><p>一个代理类实现公共接口,代理类中要有真实的类的属性</p></li><li><p>通过代理类，实现真实类的方法</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 结婚接口  */</span>  <span class="token keyword">interface</span> <span class="token class-name">Marry</span><span class="token punctuation">&#123;</span>  <span class="token comment">/**        * 实现结婚的方法  */</span>  <span class="token keyword">void</span> <span class="token function">happenMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>```java</p><p>/**</p><ul><li>真实角色    */</li></ul><pre><code>class Men implements Marry&#123;private String name;</code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Men</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happenMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span> <span class="token string">"结婚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>```java<span class="token comment">/**   * 婚庆公司   */</span>  <span class="token keyword">class</span> <span class="token class-name">WeddingCompany</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span><span class="token punctuation">&#123;</span>       <span class="token keyword">private</span> <span class="token class-name">Marry</span> target<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">WeddingCompany</span><span class="token punctuation">(</span><span class="token class-name">Marry</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happenMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">happenMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"婚礼结束，准备收钱!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"婚礼准备中!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Marry</span> sun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Men</span><span class="token punctuation">(</span><span class="token string">"sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">WeddingCompany</span> weddingCompany <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeddingCompany</span><span class="token punctuation">(</span>sun<span class="token punctuation">)</span><span class="token punctuation">;</span>       weddingCompany<span class="token punctuation">.</span><span class="token function">happenMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、多线程例子"><a href="#四、多线程例子" class="headerlink" title="四、多线程例子"></a>四、多线程例子</h2><h3 id="4-1-多图片下载"><a href="#4-1-多图片下载" class="headerlink" title="4.1    多图片下载"></a>4.1    多图片下载</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: WebDownLoader   * @Description: 使用commas 类中的数据进行图片下载   * @Author: DELL   * @Date: 2021/12/24 9:46   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebDownLoader</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> filaUrl<span class="token punctuation">,</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>filaUrl<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功执行了方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行了下载器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**   * @ClassName: MyThread   * @Description: Thread 实现多图片下载   * @Author: DELL   * @Date: 2021/12/24 9:00   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDown</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> fileUrl<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> fileName<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">MyThreadDown</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fileUrl <span class="token operator">=</span> fileUrl<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用下载器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">WebDownLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          loader<span class="token punctuation">.</span><span class="token function">downLoader</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载文件："</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/**   * 下载网络图片   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">MyThreadDown</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadDown</span><span class="token punctuation">(</span><span class="token string">"https://scpic.chinaz.net/files/pic/pic9/202112/bpic25011.jpg"</span><span class="token punctuation">,</span> <span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">MyThreadDown</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadDown</span><span class="token punctuation">(</span><span class="token string">"https://scpic.chinaz.net/files/pic/pic9/202112/bpic25012.jpg"</span><span class="token punctuation">,</span> <span class="token string">"2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">MyThreadDown</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadDown</span><span class="token punctuation">(</span><span class="token string">"https://scpic.chinaz.net/files/pic/pic9/202112/bpic25013.jpg"</span><span class="token punctuation">,</span> <span class="token string">"3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-火车票抢票问题的模拟"><a href="#4-2-火车票抢票问题的模拟" class="headerlink" title="4.2    火车票抢票问题的模拟"></a>4.2    火车票抢票问题的模拟</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: ConcurrencyQuestion   * @Description: 并发问题的模拟   * 火车票抢票模拟   * 多线程是不安全的，多线程处理会导致同一个票被多个人抢到   * @Author: sunyahui   * @Date: 2021/12/25 12:14   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrencyQuestion</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/** 票数 */</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNums <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"拿到了票"</span><span class="token operator">+</span>ticketNums<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">ConcurrencyQuestion</span> concurrencyQuestion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrencyQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>concurrencyQuestion<span class="token punctuation">,</span><span class="token string">"sun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>concurrencyQuestion<span class="token punctuation">,</span><span class="token string">"sun1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>concurrencyQuestion<span class="token punctuation">,</span><span class="token string">"sun2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-龟兔赛跑"><a href="#4-3-龟兔赛跑" class="headerlink" title="4.3    龟兔赛跑"></a>4.3    龟兔赛跑</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * @ClassName: Race   * @Description: 龟兔赛跑模拟   * @Author: sunyahui   * @Date: 2021/12/25 12:30   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Race</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**胜利者*/</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> winner<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getOver</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//让乌龟稳赢，给兔子下绊子  </span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"兔"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"兔子被石头绊倒了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>              <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"跑了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"步;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**判断比赛是否结束*/</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getOver</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>winner<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               winner <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>winner<span class="token operator">+</span><span class="token string">"赢得了比赛!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Race</span> race <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Race</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>race<span class="token punctuation">,</span><span class="token string">"兔"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>race<span class="token punctuation">,</span><span class="token string">"龟"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo心酸历程</title>
      <link href="/2022/07/03/hexo/"/>
      <url>/2022/07/03/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-B站视频教程"><a href="#1-B站视频教程" class="headerlink" title="1.    B站视频教程"></a>1.    <a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=5&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=4cae1db41471f5106cc3ae0220055e37">B站视频教程</a></h3><h3 id="2-hexo-使用详细步骤"><a href="#2-hexo-使用详细步骤" class="headerlink" title="2.    hexo 使用详细步骤"></a>2.    hexo 使用详细步骤</h3><h3 id="3-遇到的问题及解决办法"><a href="#3-遇到的问题及解决办法" class="headerlink" title="3.    遇到的问题及解决办法"></a>3.    遇到的问题及解决办法</h3><ul><li><p>使用 npm 命令会出现会出现警告</p><pre class="line-numbers language-none"><code class="language-none">这个无关大雅，只是不好看，也可以按它的提示将：-g 改为 --location&#x3D;global<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 ssh -T <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;</a> 命令时出现 22 端口错误，或者 443 错误</p><pre class="line-numbers language-none"><code class="language-none">1、在你的：C:\Users\用户名\.ssh 文件夹里创建一个 config文件2、文件内容：Host github.comUser 你的github邮箱地址Hostname 140.82.114.36PreferredAuthentications publickeyIdentityFile ~&#x2F;.ssh&#x2F;id_rsaPort 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>hexo init 失败</p><pre class="line-numbers language-none"><code class="language-none">1、使用阿里巴巴定制的 cnpm 命令行工具代替 npmnpm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org2、输入 cnpm install ，hexo 框架的代码就已经上传到你的 github 仓库里了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>deploy 配置</p><pre class="line-numbers language-ymal" data-language="ymal"><code class="language-ymal">deploy:  type: git  repository: git@github.com:coderLiuyuyan&#x2F;coderLiuyuyan.github.io.git  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
